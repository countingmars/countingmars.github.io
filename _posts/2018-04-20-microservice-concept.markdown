---
layout: post
title:  "마이크로서비스의 개념"
date:   2018-03-23 18:25:01
author: Mars
categories: tools
---

### 마이크로서비스
마이크로서비스란 작고 자율적으로 협업하는 서비스를 의미하며, 분산 시스템과 SOA의 개념을 더 깊이 내포하고 있다. 

"마이크로서비스란 2주 안에 재작성될 수 있는 것" --존 이브스
"충분히 작아서 더 이상 작아질 수 없는 크기" --샘 뉴먼

### 마이크로서비스의 부상
Domain Driven Design, Continuously Delivery, On-demand Virtualization, 인프라스트럭처 자동화, 작고 자율적인 팀, System at Scale 의 발전으로 마이크로서비스 아키텍쳐가 대세가 되었다.

### 마이크로서비스의 특징
마이크로서비스는 자율적이어야 하며, 따라서 독립적으로 동작할 수 있어야 하므로 중복을 두려워하지 않는다.
 

Single Responsibility Principle은 "같은 이유로 변경되는 것을 한 곳으로 모으고(Cohesive), 서로 다른 이유로 변경되는 것은 분리하라(Decoupling)" 를 강조한다. 마이크로서비스는 이러한 관점으로 비즈니스를 바라보며, 따라서 비즈니스의 경계에 맞춰 마이크로서비스를 설계해야 한다.
 

마이크로서비스는 독립적으로 변경될 수 있어야하며, 클라이언트의 변경없이 독립적으로 배포될 수 있어야 한다.
 

다른 시스템과의 독립성이 마이크로서비스의 핵심이다. "다른 변경 없이 특정 서비스만 변경하고 배포할 수 있는가"는 마이크로서비스의 황금률(원칙)이다.


### 마이크로서비스의 혜택
##### 기술 이기종성
마이크로서비스는 독립적이므로 서비스 특성에 맞는 기술을 선택할 수 있는 자율성을 확보할 수 있다. 하지만 익숙하지 않은 기술을 많이 사용하는 것은 리스크를 증가시킨다. 

##### 회복성
한 시스템에 장애가 발생하더라도 나머지 시스템에 전파되지 않아야 한다. 마이크로서비스는 시스템이 명확하게 분리되어 있으므로 문제를 격리하기 위한 좋은 격벽(bulkhead, 선박의 방을 막는 칸막이 벽)이 되므로 뛰어난 회복성을 가진다. 

##### 확장성
시스템의 특정 부분의 성능이 부족할 경우, 그 부분만 확장할 수 있다. AWS의 On-demand provisioning system(자원을 상황에 맞게 할당, 배치, 배포, 구성할 수 있는 시스템)을 도입하면 적시에 확장할 수 있게 되지만, 모든 것을 아키텍처로만 해결하고자 한다고해서 바로 비용절감이 되는 것은 아니다. 

##### 배포용이성
자율적으로 독립적인 시스템인데 클라이언트가 변경될 필요가 없으므로, 배포로 인한 시스템의 영향도를 높은 확률로 예측할 수가 있다. 문제가 발생하더라도 손쉽게 서비스를 롤백하여 문제를 격리할 수 있다. 

##### 조직 부합성
아키텍처를 조직 구조에 맞게 배치할 수 있고, 최적의 팀 크기와 생선성을 위해 하나의 코드베이스에서 일하는 인원을 최소화할 수 있다. 서비스의 소유권 이전 또한 가능하다.

##### 조합성
분산 시스템과 SOA의 주요 장점 중 하나는 기능을 재사용할 기회가 많다는 것이다. 다양한 고객을 위한 다양한 조합을 쉽게 조직할 수 있다.

##### 개발자 성장성
마이크로서비스는 서비스별 자율과 독립이 중요하므로 개별 엔지니어의 기술적 역량이 더욱 중요하므로, 자발적 성장을 장려할 수 있다.

##### 은총알은 없다
마이크로서비스는 분산 시스템의 복잡성을 모두 내포하고 있으며, 배포, 테스트, 모니터링을 훨씬 더 잘다루어야 한다. 분산 트랜잭션이나 CAP 정리에 대해서도 고민해야 한다. 

### 마이크로서비스의 모델링
처음 시작할 때는 monolithic 하게 유지하라. 서비스의 경계를 잘못 설정하면 큰 비용이 들게 되므로 새로운 도메인에 익숙해져서 안정화될 때까지 기다리는 것이 현명하다. 여러 측면에서 monolithic 코드베이스에서 서서히 마이크로서비스로 분해하는 것이 쉬운 길이다.


마이크로서비스가 빈약한 CRUD(create, read, update, delete) 서비스가 되지 않도록 주의해야 한다. 데이터가 아닌 도메인이 제공하는 기능이 무엇인가의 관점에서 바라봐야 한다. 


마이크로서비스의 경계를 설계할 때 우선 넓고 큰 단위의 경계를 먼저 생각한 뒤에, 분리를 통한 혜택을 발견했을 때 세분화 하는 것이 좋다.


다음 편으로는 마이크로서비스의 기술적 고려사항을 다루겠다.


 


